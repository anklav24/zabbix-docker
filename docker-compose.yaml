version: '3.9'

services:
  zabbix-server:
    image: zabbix/zabbix-server-pgsql:ubuntu-5.0.16
    ports:
      - "10051:10051"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./zbx_env/usr/lib/zabbix/alertscripts:/usr/lib/zabbix/alertscripts:ro
      - ./zbx_env/usr/lib/zabbix/externalscripts:/usr/lib/zabbix/externalscripts:ro
      - ./zbx_env/var/lib/zabbix/export:/var/lib/zabbix/export:rw
      - ./zbx_env/var/lib/zabbix/modules:/var/lib/zabbix/modules:ro
      - ./zbx_env/var/lib/zabbix/enc:/var/lib/zabbix/enc:ro
      - ./zbx_env/var/lib/zabbix/ssh_keys:/var/lib/zabbix/ssh_keys:ro
      - ./zbx_env/var/lib/zabbix/mibs:/var/lib/zabbix/mibs:ro
      - ./zbx_env/var/lib/zabbix/snmptraps:/var/lib/zabbix/snmptraps:ro
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    env_file:
      - ./env_vars/.env_db_pgsql
      - ./env_vars/.env_srv
    secrets:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    depends_on:
      - postgres-server
    networks:
      zbx_net_backend:
      zbx_net_frontend:
    stop_grace_period: 30s
    sysctls:
      - net.ipv4.ip_local_port_range=1024 65000
      - net.ipv4.conf.all.accept_redirects=0
      - net.ipv4.conf.all.secure_redirects=0
      - net.ipv4.conf.all.send_redirects=0
    labels:
      com.zabbix.description: "Zabbix server with PostgreSQL database support"
      com.zabbix.company: "Zabbix LLC"
      com.zabbix.component: "zabbix-server"
      com.zabbix.dbtype: "pgsql"
      com.zabbix.os: "ubuntu"
    restart: always

  zabbix-web-nginx-pgsql:
    image: zabbix/zabbix-web-nginx-pgsql:ubuntu-5.0.16
    ports:
      - "8080:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./zbx_env/etc/ssl/nginx:/etc/ssl/nginx:ro
      - ./zbx_env/usr/share/zabbix/modules/:/usr/share/zabbix/modules/:ro
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    env_file:
      - ./env_vars/.env_db_pgsql
      - ./env_vars/.env_web
    secrets:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    depends_on:
      - postgres-server
      - zabbix-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      zbx_net_backend:
      zbx_net_frontend:
    stop_grace_period: 10s
    sysctls:
      - net.core.somaxconn=65535
    labels:
      com.zabbix.description: "Zabbix frontend on Nginx web-server with PostgreSQL database support"
      com.zabbix.company: "Zabbix LLC"
      com.zabbix.component: "zabbix-frontend"
      com.zabbix.webserver: "nginx"
      com.zabbix.dbtype: "pgsql"
      com.zabbix.os: "ubuntu"
    restart: always

  zabbix-agent:
    image: zabbix/zabbix-agent:ubuntu-5.0.16
    ports:
      - "10050:10050"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./zbx_env/etc/zabbix/zabbix_agentd.d:/etc/zabbix/zabbix_agentd.d:ro
      - ./zbx_env/var/lib/zabbix/modules:/var/lib/zabbix/modules:ro
      - ./zbx_env/var/lib/zabbix/enc:/var/lib/zabbix/enc:ro
      - ./zbx_env/var/lib/zabbix/ssh_keys:/var/lib/zabbix/ssh_keys:ro
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
      mode: global
    env_file:
      - ./env_vars/.env_agent
    privileged: true
    pid: "host"
    networks:
      zbx_net_backend:
        aliases:
          - zabbix-server-agent
    stop_grace_period: 5s
    labels:
      com.zabbix.description: "Zabbix agent"
      com.zabbix.company: "Zabbix LLC"
      com.zabbix.component: "zabbix-agentd"
      com.zabbix.os: "ubuntu"
    restart: always

  postgres-server:
    image: postgres:12  # Поменять на ubuntu?
    volumes:
      - /data/zbx_env/var/lib/postgresql/data:/var/lib/postgresql/data:rw
      - ./env_vars/.ZBX_DB_CA_FILE:/run/secrets/root-ca.pem:ro
      - ./env_vars/.ZBX_DB_CERT_FILE:/run/secrets/server-cert.pem:ro
      - ./env_vars/.ZBX_DB_KEY_FILE:/run/secrets/server-key.pem:ro
    env_file:
      - ./env_vars/.env_db_pgsql
    secrets:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    stop_grace_period: 1m
    networks:
      zbx_net_backend:
    restart: always

  pgadmin: # optional more functional and creative UI for PostgreSQL
    image: dpage/pgadmin4:6.0
    ports:
      - "444:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    env_file:
      - ./env_vars/.env_pgadmin
    depends_on:
      - postgres-server
    networks:
      zbx_net_backend:
      zbx_net_frontend:
    restart: always

  grafana: # optional more functional and creative UI for zabbix
    image: grafana/grafana:8.2.0-ubuntu
    volumes:
      - grafana_storage:/var/lib/grafana
    ports:
      - "3000:3000"
    env_file:
      - ./env_vars/.env_grafana
    depends_on:
      - zabbix-server
      - postgres-server
      - zabbix-web-nginx-pgsql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=http,https"
      - "traefik.http.routers.grafana.rule=Host(`grafana.testing24.duckdns.org`)"
#      - "traefik.http.routers.grafana.rule=Host(`testing24.duckdns.org`) && PathPrefix(`/grafana`)"
#      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=staging"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      zbx_net_backend:
      zbx_net_frontend:
    restart: always

  portainer: # optional more functional and creative UI for docker
    image: portainer/portainer-ce:2.9.1-alpine
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock  # Connect to docker API
    ports:
      - "8000:8000"
      - "9000:9000"  # legacy HTTP can be disabled by Force HTTPS only in settings.
      - "9443:9443"  # Self-sing SSL
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=http,https"
      - "traefik.http.routers.portainer.rule=Host(`portainer.testing24.duckdns.org`)"
#      - "traefik.http.routers.portainer.rule=Host(`testing24.duckdns.org`) && PathPrefix(`/portainer`)"
#      - "traefik.http.routers.portainer.rule=PathPrefix(`/portainer`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=staging"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    networks:
      zbx_net_backend:
      zbx_net_frontend:
    restart: always

networks:
  zbx_net_frontend:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
  zbx_net_backend:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.16.239.0/24

volumes:  # Persistent data
  grafana_storage:
  portainer_data:
  pgadmin_data:

secrets:
  POSTGRES_USER:
    file: ./env_vars/.POSTGRES_USER
  POSTGRES_PASSWORD:
    file: ./env_vars/.POSTGRES_PASSWORD
